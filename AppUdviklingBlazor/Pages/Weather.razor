@page "/weather"
@inject HttpClient Http

<div class="container mt-5">
    <!-- Title Section -->
    <div class="text-center mb-4">
        <h1 class="display-4 text-primary">Weather Forecast</h1>
        <p class="lead">This component demonstrates fetching data from the server.</p>
    </div>

    @if (forecasts == null)
    {
        <div class="card shadow-sm mb-4 p-4">
            <div class="text-center">
                <p><em>Loading...</em></p>
            </div>
        </div>
    }
    else
    {
        <!-- Weather Data Table Section -->
        <div class="card shadow-sm mb-4 p-4">
            <div class="table-responsive">
                <table class="table table-striped table-bordered mb-0">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Date</th>
                            <th scope="col">Location</th>
                            <th scope="col">Temperature (@(isCelsius ? "°C" : "°F"))</th>
                            <th scope="col">Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in filteredForecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.Location</td>
                                <td>@DisplayTemperature(forecast)</td>
                                <td style="color:@(SetSummaryColor(forecast.Summary) ?? "black")">@forecast.Summary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Input and Button Section -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card shadow-sm p-4">
                    <label for="forecastCount" class="form-label">Number of forecasts:</label>
                    <InputNumber id="forecastCount"
                                 TValue="int"
                                 Value="@forecastCount"
                                 ValueChanged="OnForecastCountChanged"
                                 ValueExpression="@(() => forecastCount)"
                                 class="form-control mb-3"
                                 placeholder="Type how many forecasts to add" />

                    <p class="mb-3 fw-bold">Filter by Temperature:</p>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="minTemperature" class="form-label">Min Temperature:</label>
                            <div class="input-group">
                                <InputNumber id="minTemperature" @bind-Value="minTemperature" class="form-control" placeholder="Minimum" />
                                <span class="input-group-text">@((isCelsius ? "°C" : "°F"))</span>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="maxTemperature" class="form-label">Max Temperature:</label>
                            <div class="input-group">
                                <InputNumber id="maxTemperature" @bind-Value="maxTemperature" class="form-control" placeholder="Maximum" />
                                <span class="input-group-text">@((isCelsius ? "°C" : "°F"))</span>
                            </div>
                        </div>
                    </div>
                    <div class="text-center">
                        <button class="btn btn-success mt-3" @onclick="ApplyTemperatureFilter">Apply Temperature Filter</button>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm p-4 text-center">
                    <button class="btn btn-primary mb-2" @onclick="AddFiveForecasts">Add 5</button>
                    <button class="btn btn-danger mb-2" @onclick="RemoveFiveForecasts">Remove 5</button>
                    <button class="btn btn-secondary" @onclick="ToggleTemperatureUnit">Toggle to @(isCelsius ? "Fahrenheit" : "Celsius")</button>
                </div>
            </div>
        </div>
    }
</div>





@code {
    private List<WeatherForecast> forecasts = new();
    private List<WeatherForecast> filteredForecasts = new();
    private int forecastCount = 10;
    private bool isCelsius = true;
    private int? minTemperature;
    private int? maxTemperature;

    protected override async Task OnInitializedAsync()
    {
        await FetchForecasts();
    }

    private async Task AddFiveForecasts()
    {
        forecastCount += 5;
        await FetchForecasts();
    }

    private async Task RemoveFiveForecasts()
    {
        if (forecastCount > 5)
        {
            forecastCount -= 5;
            await FetchForecasts();
        }
    }

    private async Task OnForecastCountChanged(int newCount)
    {
        forecastCount = newCount;
        await FetchForecasts(); 
    }

    private async Task FetchForecasts()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>($"https://localhost:7018/api/weather/getforecasts?count={forecastCount}");
            ApplyTemperatureFilter(); 
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
        }
    }

    private void ToggleTemperatureUnit()
    {
        isCelsius = !isCelsius;
    }

    private string DisplayTemperature(WeatherForecast forecast)
    {
        return isCelsius ? $"{forecast.TemperatureC}°C" : $"{forecast.TemperatureF}°F";
    }

    private void ApplyTemperatureFilter()
    {
        filteredForecasts = forecasts.Where(forecast =>
            (!minTemperature.HasValue || (isCelsius ? forecast.TemperatureC : forecast.TemperatureF) >= minTemperature) &&
            (!maxTemperature.HasValue || (isCelsius ? forecast.TemperatureC : forecast.TemperatureF) <= maxTemperature))
            .ToList();
    }

    private string SetSummaryColor(string summary)
    {
        return summary.ToLower() switch
        {
            "freezing" or "cold" => "blue",
            "hot" or "warm" => "red",
            _ => "green"
        };
    }
}
